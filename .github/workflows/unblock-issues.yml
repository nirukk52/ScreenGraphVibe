name: Unblock Dependent Issues

on:
  pull_request:
    types: [closed]
  issues:
    types: [closed]

permissions:
  issues: write
  pull-requests: read

jobs:
  unblock:
    if: github.event.pull_request.merged == true || github.event.issue.state == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Unblock dependent issues using GraphQL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SG_BOT_TOKEN }}
          script: |
            // Get closed issue numbers
            const closedIssues = [];
            
            if (context.payload.pull_request) {
              const prBody = context.payload.pull_request.body || '';
              const matches = [...prBody.matchAll(/(?:closes|resolves|fixes)\s+#(\d+)/gi)];
              closedIssues.push(...matches.map(m => parseInt(m[1])));
            } else if (context.payload.issue) {
              closedIssues.push(context.payload.issue.number);
            }
            
            console.log(`üîç Closed issues: ${closedIssues.join(', ')}`);
            
            if (closedIssues.length === 0) {
              console.log('‚ö†Ô∏è No closed issues found');
              return;
            }
            
            // Use GraphQL to query the CLOSED issue and find what it blocks
            // Then check which of those blocked issues are now unblocked
            const getBlockedIssuesQuery = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    number
                    trackedIssues(first: 100) {
                      nodes {
                        number
                        state
                        title
                        url
                        assignees(first: 10) {
                          nodes {
                            login
                          }
                        }
                        labels(first: 10) {
                          nodes {
                            name
                          }
                        }
                        trackedInIssues(first: 50) {
                          nodes {
                            number
                            state
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            // Process each closed issue
            for (const closedNum of closedIssues) {
              console.log(`\nüîç Processing closed issue #${closedNum}`);
              
              try {
                // Query this specific closed issue to find what it blocks
                const result = await github.graphql(getBlockedIssuesQuery, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issueNumber: closedNum
                });
                
                const closedIssue = result.repository.issue;
                if (!closedIssue) {
                  console.log(`   ‚ö†Ô∏è Issue #${closedNum} not found`);
                  continue;
                }
                
                // trackedIssues = issues that are blocked by THIS issue
                const blockedIssues = closedIssue.trackedIssues?.nodes || [];
                
                if (blockedIssues.length === 0) {
                  console.log(`   ‚ÑπÔ∏è Issue #${closedNum} doesn't block any other issues`);
                  continue;
                }
                
                console.log(`   üîó Found ${blockedIssues.length} issues blocked by #${closedNum}`);
                
                // Check each blocked issue
                for (const issue of blockedIssues) {
                  if (issue.state !== 'OPEN') {
                    console.log(`   ‚è≠Ô∏è Issue #${issue.number} already ${issue.state.toLowerCase()}, skipping`);
                    continue;
                  }
                  
                  console.log(`   üìã Checking issue #${issue.number}: ${issue.title}`);
                  
                  // Get all blockers for this issue (trackedInIssues = what blocks THIS issue)
                  const blockers = issue.trackedInIssues?.nodes || [];
                  const blockerNumbers = blockers.map(b => b.number);
                  
                  console.log(`      Blockers: ${blockerNumbers.join(', ')}`);
                  
                  // Check if ALL blockers are closed
                  const allResolved = blockers.every(b => b.state === 'CLOSED');
                  const stillBlocked = blockers.filter(b => b.state !== 'CLOSED');
                  
                  if (allResolved) {
                    console.log(`   ‚úÖ Issue #${issue.number} is now UNBLOCKED`);
                    
                    // Post comment
                    const assignees = issue.assignees.nodes.map(a => `@${a.login}`).join(' ');
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: `‚úÖ **Unblocked!** All dependencies resolved (${blockerNumbers.map(n => `#${n}`).join(', ')}).\n\n${assignees || '@' + context.repo.owner} This issue is ready to work on.`
                    });
                    
                    // Update labels
                    const currentLabels = issue.labels.nodes.map(l => l.name);
                    const newLabels = currentLabels
                      .filter(l => l !== 'status: blocked')
                      .concat(currentLabels.includes('status: ready') ? [] : ['status: ready']);
                    
                    await github.rest.issues.setLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      labels: newLabels
                    });
                    
                    console.log(`      Updated labels: ${newLabels.join(', ')}`);
                  } else {
                    console.log(`   ‚è∏Ô∏è Issue #${issue.number} still blocked by: ${stillBlocked.map(b => `#${b.number}`).join(', ')}`);
                    
                    // Post partial update
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: `‚è∏Ô∏è Partially unblocked: #${closedNum} resolved.\n\nStill waiting on: ${stillBlocked.map(b => `#${b.number}`).join(', ')}`
                    });
                  }
                }
              } catch (error) {
                console.error(`   ‚ùå Error processing issue #${closedNum}: ${error.message}`);
              }
            }
            
            console.log('\n‚úÖ Dependency check complete');
