name: Unblock Dependent Issues

on:
  pull_request:
    types: [closed]
  issues:
    types: [closed]

permissions:
  issues: write
  pull-requests: read

jobs:
  unblock:
    if: github.event.pull_request.merged == true || github.event.issue.state == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Parse and unblock dependent issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SG_BOT_TOKEN }}
          script: |
            // Get closed issue numbers
            const closedIssues = [];
            
            if (context.payload.pull_request) {
              // From PR body
              const prBody = context.payload.pull_request.body || '';
              const matches = [...prBody.matchAll(/(?:closes|resolves|fixes)\s+#(\d+)/gi)];
              closedIssues.push(...matches.map(m => parseInt(m[1])));
            } else if (context.payload.issue) {
              // Direct issue close
              closedIssues.push(context.payload.issue.number);
            }
            
            console.log(`üîç Closed issues: ${closedIssues.join(', ')}`);
            
            if (closedIssues.length === 0) {
              console.log('‚ö†Ô∏è No closed issues found');
              return;
            }
            
            // GitHub API: Get blocked issues using timeline API
            // This reads the native "blocked by" relationships
            for (const closedNum of closedIssues) {
              try {
                // Get issues that have this issue in their timeline as a blocker
                const { data: searchResults } = await github.rest.search.issuesAndPullRequests({
                  q: `repo:${context.repo.owner}/${context.repo.repo} is:open is:issue`,
                  per_page: 100
                });
                
                console.log(`üìã Checking ${searchResults.items.length} open issues for dependencies`);
                
                for (const issue of searchResults.items) {
                  // Check issue timeline for blocked_by events
                  const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number
                  });
                  
                  // Look for connected/cross-referenced events related to our closed issue
                  const isBlocked = timeline.some(event => 
                    (event.event === 'cross-referenced' || event.event === 'connected') &&
                    event.source?.issue?.number === closedNum
                  );
                  
                  if (!isBlocked) continue;
                  
                  console.log(`üîó Issue #${issue.number} may be blocked by #${closedNum}`);
                  
                  // Parse issue body for explicit "Blocked by" metadata
                  const body = issue.body || '';
                  const blockedByMatch = body.match(/(?:blocked by|depends on|requires):?\s*([#\d,\s]+)/i);
                  
                  if (!blockedByMatch) {
                    console.log(`   ‚ö†Ô∏è No explicit "Blocked by" found in body`);
                    continue;
                  }
                  
                  const blockers = [...blockedByMatch[1].matchAll(/#(\d+)/g)]
                    .map(m => parseInt(m[1]));
                  
                  if (!blockers.includes(closedNum)) continue;
                  
                  console.log(`   Blockers: ${blockers.join(', ')}`);
                  
                  // Check if ALL blockers are resolved
                  const blockerStates = await Promise.all(
                    blockers.map(async b => {
                      try {
                        const { data: blockerIssue } = await github.rest.issues.get({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: b
                        });
                        return { number: b, closed: blockerIssue.state === 'closed' };
                      } catch (e) {
                        return { number: b, closed: false };
                      }
                    })
                  );
                  
                  const allResolved = blockerStates.every(b => b.closed);
                  const stillBlocked = blockerStates.filter(b => !b.closed);
                  
                  if (allResolved) {
                    // üéâ Fully unblocked!
                    console.log(`‚úÖ Issue #${issue.number} is now UNBLOCKED`);
                    
                    const assignees = issue.assignees.map(a => `@${a.login}`).join(' ');
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: `‚úÖ **Unblocked!** All dependencies resolved (${blockers.map(b => `#${b}`).join(', ')}).\n\n${assignees} This issue is ready to work on.`
                    });
                    
                    // Update label
                    const currentLabels = issue.labels.map(l => typeof l === 'string' ? l : l.name);
                    const newLabels = currentLabels
                      .filter(l => l !== 'status: blocked')
                      .concat('status: ready');
                    
                    await github.rest.issues.setLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      labels: newLabels
                    });
                  } else {
                    console.log(`‚è∏Ô∏è  Issue #${issue.number} still blocked by: ${stillBlocked.map(b => `#${b.number}`).join(', ')}`);
                  }
                }
              } catch (e) {
                console.error(`‚ùå Error processing issue #${closedNum}: ${e.message}`);
              }
            }
            
            console.log('‚úÖ Dependency check complete');
