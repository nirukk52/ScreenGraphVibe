name: Unblock Dependent Issues

on:
  pull_request:
    types: [closed]
  issues:
    types: [closed]

permissions:
  issues: write
  pull-requests: read

jobs:
  unblock:
    if: github.event.pull_request.merged == true || github.event.issue.state == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Unblock dependent issues using GraphQL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SG_BOT_TOKEN }}
          script: |
            // Get closed issue numbers
            const closedIssues = [];
            
            if (context.payload.pull_request) {
              const prBody = context.payload.pull_request.body || '';
              const matches = [...prBody.matchAll(/(?:closes|resolves|fixes)\s+#(\d+)/gi)];
              closedIssues.push(...matches.map(m => parseInt(m[1])));
            } else if (context.payload.issue) {
              closedIssues.push(context.payload.issue.number);
            }
            
            console.log(`üîç Closed issues: ${closedIssues.join(', ')}`);
            
            if (closedIssues.length === 0) {
              console.log('‚ö†Ô∏è No closed issues found');
              return;
            }
            
            // Query closed issue for native relationships (trackedIssues)
            const getClosedIssueRelationships = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    number
                    trackedIssues(first: 100) {
                      totalCount
                      nodes { number state }
                    }
                  }
                }
              }
            `;

            // Query details for a candidate blocked issue
            const getIssueDetails = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    number
                    state
                    title
                    url
                    assignees(first: 10) { nodes { login } }
                    labels(first: 20) { nodes { name } }
                    trackedInIssues(first: 100) { nodes { number state } }
                  }
                }
              }
            `;
            
            // Process each closed issue
            for (const closedNum of closedIssues) {
              console.log(`\nüîç Processing closed issue #${closedNum}`);
              
              try {
                // Query this specific closed issue to find what it blocks (native + timeline fallback)
                const result = await github.graphql(getClosedIssueRelationships, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issueNumber: closedNum
                });
                
                const closedIssue = result.repository.issue;
                if (!closedIssue) {
                  console.log(`   ‚ö†Ô∏è Issue #${closedNum} not found`);
                  continue;
                }
                // Gather blocked issues from native trackedIssues (Approach A)
                const nativeBlocked = (closedIssue.trackedIssues?.nodes || []).map(n => n.number);
                const nativeCount = closedIssue.trackedIssues?.totalCount ?? 0;

                // Approach B: Paginate open issues and find those where trackedInIssues contains the closed issue
                const listOpenIssuesWithBlockers = `
                  query($owner: String!, $repo: String!, $cursor: String) {
                    repository(owner: $owner, name: $repo) {
                      issues(states: OPEN, first: 100, after: $cursor) {
                        pageInfo { hasNextPage endCursor }
                        nodes {
                          number
                          title
                          url
                          state
                          assignees(first: 10) { nodes { login } }
                          labels(first: 20) { nodes { name } }
                          trackedInIssues(first: 100) { nodes { number state } }
                        }
                      }
                    }
                  }
                `;

                let cursor = null;
                let candidatesB = [];
                while (true) {
                  const pageResult = await github.graphql(listOpenIssuesWithBlockers, {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    cursor
                  });
                  const pageIssues = pageResult.repository.issues.nodes || [];
                  for (const issue of pageIssues) {
                    const blockers = issue.trackedInIssues?.nodes || [];
                    const blockerNumbers = blockers.map(b => b.number);
                    if (blockerNumbers.includes(closedNum)) candidatesB.push(issue.number);
                  }
                  if (!pageResult.repository.issues.pageInfo.hasNextPage) break;
                  cursor = pageResult.repository.issues.pageInfo.endCursor;
                }

                // Approach C: REST search fallback for body metadata "Blocked by: #<num>"
                let candidatesC = [];
                try {
                  const q = `repo:${context.repo.owner}/${context.repo.repo} is:issue is:open in:body "#${closedNum}"`;
                  const { data: search } = await github.rest.search.issuesAndPullRequests({ q, per_page: 100 });
                  for (const item of search.items || []) {
                    if ((item.body || '').match(new RegExp(`blocked by\s*:#?\s*${closedNum}`, 'i')) ||
                        (item.body || '').match(new RegExp(`depends on\s*:#?\s*${closedNum}`, 'i')) ||
                        (item.body || '').match(new RegExp(`requires\s*:#?\s*${closedNum}`, 'i'))) {
                      candidatesC.push(item.number);
                    }
                  }
                } catch (e) {
                  console.log(`   ‚ö†Ô∏è REST search fallback failed: ${e.message}`);
                }

                // Compose unique candidate blocked issue numbers from all approaches
                const candidateBlockedNumbers = Array.from(new Set([ ...nativeBlocked, ...candidatesB, ...candidatesC ]));

                if (candidateBlockedNumbers.length === 0) {
                  console.log(`   ‚ÑπÔ∏è Issue #${closedNum} doesn't block any other issues (native=${nativeCount}, scanB=${candidatesB.length}, scanC=${candidatesC.length})`);
                  continue;
                }

                console.log(`   üîó Candidates blocked by #${closedNum}: ${candidateBlockedNumbers.join(', ')} (native=${nativeCount}, scanB=${candidatesB.length}, scanC=${candidatesC.length})`);

                // For each candidate, fetch details and decide unblocking
                for (const candidate of candidateBlockedNumbers) {
                  const details = await github.graphql(getIssueDetails, {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issueNumber: candidate
                  });

                  const issue = details.repository.issue;
                  if (!issue) continue;
                  if (issue.state !== 'OPEN') {
                    console.log(`   ‚è≠Ô∏è Issue #${issue.number} already ${issue.state.toLowerCase()}, skipping`);
                    continue;
                  }

                  const blockers = issue.trackedInIssues?.nodes || [];
                  const blockerNumbers = blockers.map(b => b.number);
                  const allResolved = blockers.every(b => b.state === 'CLOSED');
                  const stillBlocked = blockers.filter(b => b.state !== 'CLOSED');

                  if (allResolved) {
                    console.log(`   ‚úÖ Issue #${issue.number} is now UNBLOCKED (blockers: ${blockerNumbers.join(', ')})`);
                    const assignees = (issue.assignees?.nodes || []).map(a => `@${a.login}`).join(' ');
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: `‚úÖ **Unblocked!** All dependencies resolved (${blockerNumbers.map(n => `#${n}`).join(', ')}).\n\n${assignees || '@' + context.repo.owner} This issue is ready to work on.`
                    });
                    const currentLabels = (issue.labels?.nodes || []).map(l => l.name);
                    const newLabels = currentLabels.filter(l => l !== 'status: blocked');
                    if (!newLabels.includes('status: ready')) newLabels.push('status: ready');
                    await github.rest.issues.setLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issue.number, labels: newLabels });
                  } else {
                    console.log(`   ‚è∏Ô∏è Issue #${issue.number} still blocked by: ${stillBlocked.map(b => `#${b.number}`).join(', ')}`);
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: `‚è∏Ô∏è Partially unblocked: #${closedNum} resolved.\n\nStill waiting on: ${stillBlocked.map(b => `#${b.number}`).join(', ')}`
                    });
                  }
                }
              } catch (error) {
                console.error(`   ‚ùå Error processing issue #${closedNum}: ${error.message}`);
              }
            }
            
            console.log('\n‚úÖ Dependency check complete');
